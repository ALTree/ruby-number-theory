var search_data = {"index":{"searchIndex":["divisors","primes","sieve","utils","math","timing","divcount()","divisor_sigma()","divisors()","euler_phi()","extend()","factor()","get_limit()","multiplicity()","nextprime()","nthprime()","perfect?()","prevprime()","prime?()","primepi()","primes_list()","primorial()","randprime()"],"longSearchIndex":["divisors","primes","primes::sieve","utils","utils::math","utils::timing","divisors::divcount()","divisors::divisor_sigma()","divisors::divisors()","divisors::euler_phi()","primes::sieve::extend()","primes::factor()","primes::sieve::get_limit()","divisors::multiplicity()","primes::nextprime()","primes::sieve::nthprime()","divisors::perfect?()","primes::prevprime()","primes::prime?()","primes::primepi()","primes::sieve::primes_list()","primes::primorial()","primes::randprime()"],"info":[["Divisors","","Divisors.html","",""],["Primes","","Primes.html","",""],["Primes::Sieve","","Primes/Sieve.html","","<p>Class containing a list of all prime numbers up to a  certain limit. All\nthe methods that require such …\n"],["Utils","","Utils.html","",""],["Utils::Math","","Utils/Math.html","",""],["Utils::Timing","","Utils/Timing.html","",""],["divcount","Divisors","Divisors.html#method-c-divcount","(n)","<p>Return sigma_0(<code>n</code>), i.e. the number of divisors of\n<code>n</code>.\n<p>Example\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">&gt;&gt;</span> <span class=\"ruby-constant\">Divisors</span><span class=\"ruby-operator\">::</span><span class=\"ruby-identifier\">divcount</span>(<span class=\"ruby-value\">100</span>)\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">9</span>\n</pre>\n"],["divisor_sigma","Divisors","Divisors.html#method-c-divisor_sigma","(n, k)","<p>Return sigma_k(<code>n</code>), i.e. the sum of the <code>k</code>-th\npowers of  the divisors of <code>n</code>.\n<p>Example\n\n<pre>&gt;&gt; Divisors::divisor_sigma(10, ...</pre>\n"],["divisors","Divisors","Divisors.html#method-c-divisors","(n)","<p>Returns the ordered list of the divisors of <code>n</code> (1 and\n<code>n</code> included).\n<p>Example\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">&gt;&gt;</span> <span class=\"ruby-constant\">Divisors</span><span class=\"ruby-operator\">::</span><span class=\"ruby-identifier\">divisors</span>(<span class=\"ruby-value\">100</span>)\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["euler_phi","Divisors","Divisors.html#method-c-euler_phi","(n)","<p>Returns the valuer of phi(<code>n</code>), the Euler phi function; i.e. the\nnumber of integers in [1..n] comprime …\n"],["extend","Primes::Sieve","Primes/Sieve.html#method-c-extend","(high)","<p>Extends the primes list to contain all the prime numbers up to\n<code>high</code>\n"],["factor","Primes","Primes.html#method-c-factor","(n, limit = 1)","<p>Factors <code>n</code> and returns an hash containing the prime factors of\n<code>n</code> as keys and their respective multiplicities …\n"],["get_limit","Primes::Sieve","Primes/Sieve.html#method-c-get_limit","()","<p>Returns the current upper limit on the primes list.\n"],["multiplicity","Divisors","Divisors.html#method-c-multiplicity","(n, d)","<p>Returns the greatest integer <code>k</code> such that <code>d^k</code>\ndivides <code>n</code>.\n<p>Example\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">&gt;&gt;</span> <span class=\"ruby-constant\">Divisors</span><span class=\"ruby-operator\">::</span><span class=\"ruby-identifier\">multiplicity</span>(<span class=\"ruby-value\">1000</span>,<span class=\"ruby-value\">5</span>)\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">3</span>\n</pre>\n"],["nextprime","Primes","Primes.html#method-c-nextprime","(n)","<p>Returns the smallest prime number greater than <code>n</code>.\n<p>Example\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">&gt;&gt;</span> <span class=\"ruby-constant\">Primes</span><span class=\"ruby-operator\">::</span><span class=\"ruby-identifier\">nextprime</span>(<span class=\"ruby-value\">1000</span>)\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">1009</span>\n</pre>\n"],["nthprime","Primes::Sieve","Primes/Sieve.html#method-c-nthprime","(n)","<p>Returns the <code>n</code>-th prime number.\n<p>Example\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">&gt;&gt;</span> <span class=\"ruby-constant\">Primes</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Sieve</span>.<span class=\"ruby-identifier\">nthprime</span>(<span class=\"ruby-value\">5</span>)\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">11</span>\n\n<span class=\"ruby-operator\">&gt;&gt;</span> <span class=\"ruby-constant\">Primes</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Sieve</span>.<span class=\"ruby-identifier\">nthprime</span>(<span class=\"ruby-value\">500</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["perfect?","Divisors","Divisors.html#method-c-perfect-3F","(n)","<p>Returns true if <code>n</code> is a perfect number, false otherwise.\n<p>Example\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">&gt;&gt;</span> <span class=\"ruby-constant\">Divisors</span><span class=\"ruby-operator\">::</span><span class=\"ruby-identifier\">perfect?</span>(<span class=\"ruby-value\">6</span>)\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">true</span>\n</pre>\n"],["prevprime","Primes","Primes.html#method-c-prevprime","(n)","<p>Returns the greatest prime number smaller than <code>n</code>.\n<p>Example\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">&gt;&gt;</span> <span class=\"ruby-constant\">Primes</span><span class=\"ruby-operator\">::</span><span class=\"ruby-identifier\">prevprime</span>(<span class=\"ruby-value\">1000</span>)\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">997</span>\n</pre>\n"],["prime?","Primes","Primes.html#method-c-prime-3F","(n)","<p>Returns true if <code>n</code> is (probably) prime, false otherwise. For\n<code>n</code> &lt; 10^15 the answer is accurate; greater …\n"],["primepi","Primes","Primes.html#method-c-primepi","(n)","<p>Returns the value of primepi(<code>n</code>), i.e. the number of primes\nsmaller than <code>n</code>\n<p>Example\n\n<pre>&gt;&gt; Primes::primepi(100000) ...</pre>\n"],["primes_list","Primes::Sieve","Primes/Sieve.html#method-c-primes_list","(low = 1, high)","<p>Returns a list with all the prime numbers between <code>low</code> and\n<code>high</code>.\n<p>Example\n\n<pre>&gt;&gt; Primes::Sieve.primes_list(20) ...</pre>\n"],["primorial","Primes","Primes.html#method-c-primorial","(n)","<p>Return the primorial of <code>n</code>, i.e. the product of the first\n<code>n</code> prime numbers.\n<p>Example\n\n<pre>&gt;&gt; Primes::primorial(10) ...</pre>\n"],["randprime","Primes","Primes.html#method-c-randprime","(low = 1, high)","<p>Returns a random prime between <code>low</code> and <code>high</code>; and\n<code>nil</code> if there’s not one.\n<p>Example\n\n<pre>&gt;&gt; Primes::randprime(1000) ...</pre>\n"]]}}